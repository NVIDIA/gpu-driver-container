.image-precompiled-ubuntu:
  stage: image-build
  rules:
    - !reference [.manual-only, rules]
  variables:
    IMAGE_NAME: "${CI_REGISTRY_IMAGE}"
    VERSION: "${CI_COMMIT_SHORT_SHA}"
    OUT_VERSION: "${CI_COMMIT_SHORT_SHA}"
    PUSH_ON_BUILD: "true"
  before_script:
    - !reference [.buildx-setup, before_script]
    - apk add --no-cache bash make
    - mkdir output
    - 'echo "Logging in to CI registry ${CI_REGISTRY}"'
    - docker login -u "${CI_REGISTRY_USER}" -p "${CI_REGISTRY_PASSWORD}" "${CI_REGISTRY}"
    - make base-${BASE_TARGET}
    - docker run --rm  -v $(pwd)/output:/tmp/ --security-opt seccomp=unconfined ${CI_REGISTRY_IMAGE}:base-${BASE_TARGET}
  script:
    - source output/kernel_version.txt 
    - IMG_EXIST=$(docker pull "${CI_REGISTRY_IMAGE}:$(DRIVER_VERSION)-$(KERNEL_VERSION)-$(DIST)" > /dev/null &&  echo "exists" || echo "not-exists")
    - if [ "$IMG_EXIST" = "not-exists" ]; then make build-${DIST}-${DRIVER_VERSION}; else echo "Image already exists ${DRIVER_VERSION}-${KERNEL_VERSION}-${DIST}"; fi
  artifacts:
    expire_in: 1 week
    paths: [output/]

image-precompiled-ubuntu22.04:
  stage: image-build
  variables:
    DRIVER_BRANCH: 525
    DIST: signed_ubuntu22.04
    BASE_TARGET: jammy
  extends: .image-precompiled-ubuntu

# Precompiled release
release:staging-precompiled-ubuntu22.04:
  stage: release
  needs:
    - image-precompiled-ubuntu22.04
  variables:
    DIST: signed_ubuntu22.04
    CVE_UPDATES: "openssl"
    DRIVER_BRANCH: 525
    OUT_REGISTRY_USER: "${CI_REGISTRY_USER}"
    OUT_REGISTRY_TOKEN: "${CI_REGISTRY_PASSWORD}"
    OUT_REGISTRY: "${CI_REGISTRY}"
    OUT_IMAGE_NAME: "${CI_REGISTRY_IMAGE}/staging/driver"
    # Define the source image for the release
    IMAGE_NAME: "${CI_REGISTRY_IMAGE}"
    VERSION: "${CI_COMMIT_SHORT_SHA}"
    # OUT_VERSION is overridden for external releases
    OUT_VERSION: "${CI_COMMIT_SHORT_SHA}"
  before_script:
    - !reference [.regctl-setup, before_script]
    - apk add --no-cache make bash
  script:
    - 'echo "Logging in to CI registry ${CI_REGISTRY}"'
    - source output/kernel_version.txt
    - regctl registry login "${CI_REGISTRY}" -u "${CI_REGISTRY_USER}" -p "${CI_REGISTRY_PASSWORD}"
    - '[ ${CI_REGISTRY} = ${OUT_REGISTRY} ] || echo "Logging in to output registry ${OUT_REGISTRY}"'
    - '[ ${CI_REGISTRY} = ${OUT_REGISTRY} ] || regctl registry login "${OUT_REGISTRY}" -u "${OUT_REGISTRY_USER}" -p "${OUT_REGISTRY_TOKEN}"'
    # Since OUT_IMAGE_NAME and OUT_VERSION are set, this will push the CI image to the target
    - IMG_EXIST=$(docker pull "${CI_REGISTRY_IMAGE}:$(DRIVER_VERSION)-$(KERNEL_VERSION)-$(DIST)" > /dev/null &&  echo "exists" || echo "not-exists")
    - if [ "$IMG_EXIST" = "not-exists" ]; then make push-${DIST}-${DRIVER_VERSION}; else echo "Image  already exists ${DRIVER_VERSION}-${KERNEL_VERSION}-${DIST}"; fi
  artifacts:
    expire_in: 1 week
    paths: [output/]