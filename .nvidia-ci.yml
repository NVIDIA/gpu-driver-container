# Copyright (c) 2022, NVIDIA CORPORATION.  All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

include:
    - local: '.common-ci.yml'

default:
  tags:
    - cnt
    - container-dev
    - docker/multi-arch
    - docker/privileged
    - os/linux
    - type/docker

variables:
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: "/certs"
  # Release "devel"-tagged images off the master branch
  # Disabling this for now
  RELEASE_DEVEL_BRANCH: "DISABLED"
  DEVEL_RELEASE_IMAGE_VERSION: "devel"
  # Define the public staging registry
  STAGING_REGISTRY: ghcr.io/nvidia
  STAGING_VERSION: "${CI_COMMIT_SHORT_SHA}"
  PUBLISH_VERSIONS: 535.274.02 570.195.03 580.95.05

.image-pull-rules:
  # We delay the job start to allow the public pipeline to generate the required images.
  rules:
    - when: delayed
      start_in: 30 minutes

.image-pull-generic:
  stage: image-build
  variables:
    IN_REGISTRY: "${STAGING_REGISTRY}"
    IN_IMAGE_NAME: driver
    IN_VERSION: "${STAGING_VERSION}"
    OUT_REGISTRY_USER: "${CI_REGISTRY_USER}"
    OUT_REGISTRY_TOKEN: "${CI_REGISTRY_PASSWORD}"
    OUT_REGISTRY: "${CI_REGISTRY}"
    OUT_IMAGE_NAME: "${CI_REGISTRY_IMAGE}"
  timeout: 30 minutes
  retry:
    max: 2
    when:
      - job_execution_timeout
      - stuck_or_timeout_failure
  before_script:
    - !reference [.regctl-setup, before_script]
    - 'if [[ "${PRECOMPILED}" != "true" ]]; then echo DRIVER_VERSION: ${DRIVER_VERSION} ; [[ -n "${DRIVER_VERSION}" ]] || exit 1; fi'
    - apk add --no-cache make bash
    #- regctl manifest get ${IN_REGISTRY}/${IN_IMAGE_NAME}:${IN_VERSION}-${DRIVER_VERSION}-${DIST} --list > /dev/null && echo "${IN_REGISTRY}/${IN_IMAGE_NAME}:${IN_VERSION}-${DRIVER_VERSION}-${DIST}" || ( echo "${IN_REGISTRY}/${IN_IMAGE_NAME}:${IN_VERSION}-${DRIVER_VERSION}-${DIST} does not exist" && sleep infinity )
  script:
    - regctl registry login "${OUT_REGISTRY}" -u "${OUT_REGISTRY_USER}" -p "${OUT_REGISTRY_TOKEN}"
    - if [[ "${PRECOMPILED}" == "true" ]]; then IMAGE_NAME=${IN_REGISTRY}/${IN_IMAGE_NAME} ./scripts/precompiled.sh push; else make IMAGE_NAME=${IN_REGISTRY}/${IN_IMAGE_NAME} VERSION=${IN_VERSION} OUT_VERSION=${IN_VERSION} push-${DIST}-${DRIVER_VERSION}; fi

.image-pull:
  # Perform for each DRIVER_VERSION
  extends:
    - .driver-versions
    - .image-pull-generic
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - !reference [.image-pull-rules, rules]


.image-pull-ubuntu24.04:
  # Perform for each DRIVER_VERSION
  extends:
    - .driver-versions-ubuntu24.04
    - .image-pull-generic
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - !reference [.image-pull-rules, rules]

image-precompiled-ubuntu24.04:
  variables:
    DIST: signed_ubuntu24.04
    BASE_TARGET: noble
    PRECOMPILED: "true"
    CVE_UPDATES: "curl libc6"
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: delayed
      start_in: 30 minutes
  extends:
    - .driver-versions-precompiled-ubuntu24.04
    - .image-pull-generic

.image-pull-ubuntu22.04:
  # Perform for each DRIVER_VERSION
  extends:
    - .driver-versions
    - .image-pull-generic
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - !reference [.image-pull-rules, rules]

image-precompiled-ubuntu22.04:
  variables:
    DIST: signed_ubuntu22.04
    BASE_TARGET: jammy
    PRECOMPILED: "true"
    CVE_UPDATES: "curl libc6"
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: delayed
      start_in: 30 minutes
  extends:
    - .driver-versions-precompiled-ubuntu22.04
    - .image-pull-generic

image-ubuntu22.04:
  extends:
    - .image-pull-ubuntu22.04
    - .dist-ubuntu22.04

image-ubuntu24.04:
  extends:
    - .image-pull-ubuntu24.04
    - .dist-ubuntu24.04

image-rhel8:
  extends:
    - .image-pull
    - .dist-rhel8

image-rhel9:
  extends:
    - .image-pull
    - .dist-rhel9

# The .scan step forms the base of the image scan operation performed before releasing
# images.
.scan-generic:
  stage: scan
  image: "${PULSE_IMAGE}"
  variables:
    IMAGE_NAME: "${CI_REGISTRY_IMAGE}"
    VERSION: "${STAGING_VERSION}"
  rules:
    - if: $CI_COMMIT_MESSAGE =~ /\[skip[ _-]scans?\]/i
      when: never
    - if: $SKIP_SCANS && $SKIP_SCANS == "yes"
      when: never
  before_script:
    - !reference [.regctl-setup, before_script]
    # We ensure that the DRIVER_VERSION and PLATFORM are set
    - 'if [[ "${PRECOMPILED}" != "true" ]]; then echo DRIVER_VERSION: ${DRIVER_VERSION} ; [[ -n "${DRIVER_VERSION}" ]] || exit 1; fi'
    - 'echo PLATFORM: ${PLATFORM} ; [[ -n "${PLATFORM}" ]] || exit 1'
    - apk add --no-cache make bash
    - docker login -u "${CI_REGISTRY_USER}" -p "${CI_REGISTRY_PASSWORD}" "${CI_REGISTRY}"
    - if [[ "${PRECOMPILED}" == "true" ]]; then ./scripts/precompiled.sh pull; else make pull-${DIST}-${DRIVER_VERSION}; fi
    - if [[ "${PRECOMPILED}" == "true" ]]; then ./scripts/precompiled.sh archive; else make archive-${DIST}-${DRIVER_VERSION}; fi
    - AuthHeader=$(echo -n $SSA_CLIENT_ID:$SSA_CLIENT_SECRET | base64 -w0)
    - >
      export SSA_TOKEN=$(curl --request POST --header "Authorization: Basic $AuthHeader" --header "Content-Type: application/x-www-form-urlencoded" ${SSA_ISSUER_URL} | jq ".access_token" |  tr -d '"')
    - if [ -z "$SSA_TOKEN" ]; then exit 1; else echo "SSA_TOKEN set!"; fi
  script:
    - pulse-cli -n $NSPECT_ID --ssa $SSA_TOKEN scan -i "archive.tar" -p $CONTAINER_POLICY -o
  artifacts:
    when: always
    expire_in: 1 week
    paths:
      - pulse-cli.log
      - licenses.json
      - sbom.json
      - vulns.json
      - policy_evaluation.json

.scan-rules-common:
  rules:
    - if: $CI_COMMIT_MESSAGE =~ /\[skip[ _-]scans?\]/i
      when: never
    - if: $SKIP_SCANS && $SKIP_SCANS == "yes"
      when: never

.scan:
  # Repeat for each DRIVER_VERSION
  extends:
    - .driver-versions
    - .scan-generic
  rules:
    - !reference [.scan-rules-common, rules]
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - !reference [.pipeline-trigger-rules, rules]

.scan-ubuntu22.04:
  # Repeat for each DRIVER_VERSION
  extends:
    - .driver-versions
    - .scan-generic
  rules:
    - !reference [.scan-rules-common, rules]
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - !reference [.pipeline-trigger-rules, rules]

.scan-ubuntu24.04:
  # Repeat for each DRIVER_VERSION
  extends:
    - .driver-versions-ubuntu24.04
    - .scan-generic
  rules:
    - !reference [.scan-rules-common, rules]
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - !reference [.pipeline-trigger-rules, rules]

.scan-precompiled-ubuntu24.04:
  variables:
    DIST: signed_ubuntu24.04
    BASE_TARGET: noble
    PRECOMPILED: "true"
  extends:
    - .driver-versions-precompiled-ubuntu24.04
    - .scan-generic
  rules:
    - !reference [.scan-rules-common, rules]
    - !reference [.precompiled-rules, rules]

.scan-precompiled-ubuntu22.04:
  variables:
    DIST: signed_ubuntu22.04
    BASE_TARGET: jammy
    PRECOMPILED: "true"
  extends:
    - .driver-versions-precompiled-ubuntu22.04
    - .scan-generic
  rules:
    - !reference [.scan-rules-common, rules]
    - !reference [.precompiled-rules, rules]

scan-ubuntu22.04-amd64:
  extends:
    - .scan-ubuntu22.04
    - .dist-ubuntu22.04
    - .platform-amd64
  needs:
    - image-ubuntu22.04

scan-ubuntu22.04-arm64:
  extends:
    - .scan-ubuntu22.04
    - .dist-ubuntu22.04
    - .platform-arm64
  needs:
    - image-ubuntu22.04

scan-ubuntu24.04-amd64:
  extends:
    - .scan-ubuntu24.04
    - .dist-ubuntu24.04
    - .platform-amd64
  needs:
    - image-ubuntu24.04

scan-ubuntu24.04-arm64:
  extends:
    - .scan-ubuntu24.04
    - .dist-ubuntu24.04
    - .platform-arm64
  needs:
    - image-ubuntu24.04

scan-precompiled-ubuntu24.04-amd64:
  variables:
    PLATFORM: linux/amd64
  extends:
    - .scan-precompiled-ubuntu24.04
    - .platform-amd64
  needs:
    - image-precompiled-ubuntu24.04

scan-precompiled-ubuntu22.04-amd64:
  variables:
    PLATFORM: linux/amd64
  extends:
    - .scan-precompiled-ubuntu22.04
    - .platform-amd64
  needs:
    - image-precompiled-ubuntu22.04

scan-rhel8-amd64:
  extends:
    - .scan
    - .dist-rhel8
    - .platform-amd64
  needs:
    - image-rhel8

scan-rhel8-arm64:
  extends:
    - .scan
    - .dist-rhel8
    - .platform-arm64
  needs:
    - image-rhel8

scan-rhel9-amd64:
  extends:
    - .scan
    - .dist-rhel9
    - .platform-amd64
  needs:
    - image-rhel9

scan-rhel9-arm64:
  extends:
    - .scan
    - .dist-rhel9
    - .platform-arm64
  needs:
    - image-rhel9

.release:ngc-variables:
  variables:
    OUT_REGISTRY_USER: "${NGC_REGISTRY_USER}"
    OUT_REGISTRY_TOKEN: "${NGC_REGISTRY_TOKEN}"
    OUT_REGISTRY: "${NGC_REGISTRY}"
    OUT_IMAGE_NAME: "${NGC_STAGING_REGISTRY}/driver"

# Define the external release helpers
.release:ngc:
  extends:
    - .release:external
    - .release:ngc-variables

release:ngc-ubuntu22.04:
  extends:
    - .release:ngc
    - .dist-ubuntu22.04
    - .driver-versions

release:ngc-ubuntu24.04:
  extends:
    - .release:ngc
    - .dist-ubuntu24.04
    - .driver-versions-ubuntu24.04

release:ngc-precompiled-ubuntu24.04:
  variables:
    DIST: signed_ubuntu24.04
    BASE_TARGET: noble
    PRECOMPILED: "true"
  extends:
    - .driver-versions-precompiled-ubuntu24.04
    - .release-generic
    - .release:ngc-variables
  rules:
  - !reference [.precompiled-rules, rules]

release:ngc-precompiled-ubuntu22.04:
  variables:
    DIST: signed_ubuntu22.04
    BASE_TARGET: jammy
    PRECOMPILED: "true"
  extends:
    - .driver-versions-precompiled-ubuntu22.04
    - .release-generic
    - .release:ngc-variables
  rules:
    - !reference [.precompiled-rules, rules]

release:ngc-rhcos4.14:
  extends:
    - .release:ngc
    - .dist-rhel9
  variables:
    OUT_DIST: "rhcos4.14"

release:ngc-rhcos4.15:
  extends:
    - .release:ngc
    - .dist-rhel9
  variables:
    OUT_DIST: "rhcos4.15"

release:ngc-rhcos4.16:
  extends:
    - .release:ngc
    - .dist-rhel9
  variables:
    OUT_DIST: "rhcos4.16"

release:ngc-rhcos4.17:
  extends:
    - .release:ngc
    - .dist-rhel9
  variables:
    OUT_DIST: "rhcos4.17"

release:ngc-rhcos4.18:
  extends:
    - .release:ngc
    - .dist-rhel9
  variables:
    OUT_DIST: "rhcos4.18"

release:ngc-rhel8.10:
  extends:
    - .release:ngc
    - .dist-rhel8
  variables:
    OUT_DIST: "rhel8.10"

release:ngc-rhel9.4:
  extends:
    - .release:ngc
    - .dist-rhel9
  variables:
    OUT_DIST: "rhel9.4"

release:ngc-rhel9.6:
  extends:
    - .release:ngc
    - .dist-rhel9
  variables:
    OUT_DIST: "rhel9.6"

generate-build-info:
  stage: ngc-publish
  artifacts:
    paths:
      - build-info/${CI_PIPELINE_ID}-full.txt
  script:
    - |
      for DRIVER_VERSION in ${PUBLISH_VERSIONS}; do
        for file in build-info/${CI_PIPELINE_ID}-${DRIVER_VERSION}-*; do
          cat "$file" >> build-info/${CI_PIPELINE_ID}-full.txt
        done
      done
      if [ ! -s "build-info/${CI_PIPELINE_ID}-full.txt" ]; then
        echo "Error: No build information was collected from the release jobs"
        exit 1
      fi

.update-nspect:
  stage: ngc-publish
  needs:
    - job: generate-build-info
      artifacts: true
  image: 
    name: "${CNT_NGC_PUBLISH_IMAGE}"
    pull_policy: always
  variables:
    PROJECT_NAME: "gpu-driver-container"
    REPO_URL: "https://github.com/NVIDIA/gpu-driver-container.git"
  before_script:
    - export RELEASE_VERSION="${PUBLISH_VERSIONS// /_}"
  script:
    - cnt-ngc-publish nspect --versions-file "build-info/${CI_PIPELINE_ID}-full.txt"

# Update the nspect staging environment to test the nspect publishing logic
update-nspect-staging:
  extends:
    - .update-nspect
  except:
    - tags
  variables:
    ENV: "stage"
    NSPECT_CLIENT_ID: "${NSPECT_STAGING_CLIENT_ID}"
    NSPECT_CLIENT_SECRET: "${NSPECT_STAGING_CLIENT_SECRET}"

# Update the nspect production environment with the new release
update-nspect:
  extends:
    - .update-nspect
  rules:
    - if: $CI_COMMIT_TAG
  variables:
    OSRB_BUG_ID: "${OSRB_BUG_ID}"
    ENV: "prod"
    NSPECT_CLIENT_ID: "${NSPECT_PROD_CLIENT_ID}"
    NSPECT_CLIENT_SECRET: "${NSPECT_PROD_CLIENT_SECRET}"

.publish-images:
  stage: ngc-publish
  image:
    name: "${CNT_NGC_PUBLISH_IMAGE}"
    pull_policy: always
  variables:
    GITLAB_ACCESS_TOKEN: "${CNT_GITLAB_TOKEN}"
  script:
    - cnt-ngc-publish render --project-name "gpu-driver-container" --versions-file "build-info/${CI_PIPELINE_ID}-full.txt" --output gpu-driver-container.yaml
    - cnt-ngc-publish merge-request --files "gpu-driver-container.yaml"

# Raise an MR to publish the image to NGC
ngc-image-publish:
  extends:
    - .publish-images
  rules:
    - if: $CI_COMMIT_TAG
  needs:
    - job: update-nspect
    - job: generate-build-info
      artifacts: true
  variables:
    NGC_PUBLISHING_PROJECT_PATH: "${NGC_PUBLISHING_PROD_PROJECT_PATH}"

# Create a dummy MR that exercises the publishing logic
mock-image-publish:
  extends:
    - .publish-images
  except:
    - tags
  needs:
    - job: update-nspect-staging
    - job: generate-build-info
      artifacts: true
  variables:
    NGC_PUBLISHING_PROJECT_PATH: "${NGC_PUBLISHING_TEST_PROJECT_PATH}"
