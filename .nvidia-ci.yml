# Copyright (c) 2022, NVIDIA CORPORATION.  All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

include:
    - local: '.common-ci.yml'

default:
  tags:
    - cnt
    - container-dev
    - docker/multi-arch
    - docker/privileged
    - os/linux
    - type/docker

variables:
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: "/certs"
  # Release "devel"-tagged images off the master branch
  # Disabling this for now
  RELEASE_DEVEL_BRANCH: "DISABLED"
  DEVEL_RELEASE_IMAGE_VERSION: "devel"
  # Define the public staging registry
  STAGING_REGISTRY: registry.gitlab.com/nvidia/container-images/driver/staging
  STAGING_VERSION: "${CI_COMMIT_SHORT_SHA}"

.image-pull-rules:
  # We delay the job start to allow the public pipeline to generate the required images.
  rules:
    - when: delayed
      start_in: 30 minutes

.image-pull-generic:
  stage: image-build
  variables:
    IN_REGISTRY: "${STAGING_REGISTRY}"
    IN_IMAGE_NAME: driver
    IN_VERSION: "${STAGING_VERSION}"
    OUT_REGISTRY_USER: "${CI_REGISTRY_USER}"
    OUT_REGISTRY_TOKEN: "${CI_REGISTRY_PASSWORD}"
    OUT_REGISTRY: "${CI_REGISTRY}"
    OUT_IMAGE_NAME: "${CI_REGISTRY_IMAGE}"
  timeout: 30 minutes
  retry:
    max: 2
    when:
      - job_execution_timeout
      - stuck_or_timeout_failure
  before_script:
    - !reference [.regctl-setup, before_script]
    - 'if [[ "${PRECOMPILED}" != "true" ]]; then echo DRIVER_VERSION: ${DRIVER_VERSION} ; [[ -n "${DRIVER_VERSION}" ]] || exit 1; fi'
    - apk add --no-cache make bash
    #- regctl manifest get ${IN_REGISTRY}/${IN_IMAGE_NAME}:${IN_VERSION}-${DRIVER_VERSION}-${DIST} --list > /dev/null && echo "${IN_REGISTRY}/${IN_IMAGE_NAME}:${IN_VERSION}-${DRIVER_VERSION}-${DIST}" || ( echo "${IN_REGISTRY}/${IN_IMAGE_NAME}:${IN_VERSION}-${DRIVER_VERSION}-${DIST} does not exist" && sleep infinity )
  script:
    - regctl registry login "${OUT_REGISTRY}" -u "${OUT_REGISTRY_USER}" -p "${OUT_REGISTRY_TOKEN}"
    - if [[ "${PRECOMPILED}" == "true" ]]; then IMAGE_NAME=${IN_REGISTRY}/${IN_IMAGE_NAME} ./scripts/precompiled.sh push; else make IMAGE_NAME=${IN_REGISTRY}/${IN_IMAGE_NAME} VERSION=${IN_VERSION} OUT_VERSION=${IN_VERSION} push-${DIST}-${DRIVER_VERSION}; fi

.image-pull:
  # Perform for each DRIVER_VERSION
  extends:
    - .driver-versions
    - .image-pull-generic
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - !reference [.image-pull-rules, rules]


.image-pull-ubuntu22.04:
  # Perform for each DRIVER_VERSION
  extends:
    - .driver-versions-ubuntu22.04
    - .image-pull-generic
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - !reference [.image-pull-rules, rules]

image-precompiled-ubuntu22.04:
  variables:
    DIST: signed_ubuntu22.04
    BASE_TARGET: jammy
    PRECOMPILED: "true"
    CVE_UPDATES: "curl libc6"
  rules:
    - when: delayed
      start_in: 30 minutes
  extends:
    - .driver-versions-precompiled-ubuntu22.04
    - .image-pull-generic

image-ubuntu20.04:
  extends:
    - .image-pull
    - .dist-ubuntu20.04

image-ubuntu22.04:
  extends:
    - .image-pull-ubuntu22.04
    - .dist-ubuntu22.04

image-rhel8:
  extends:
    - .image-pull
    - .dist-rhel8

image-rhel9:
  extends:
    - .image-pull
    - .dist-rhel9
    - .driver-versions-rhel9

# The .scan step forms the base of the image scan operation performed before releasing
# images.
.scan-generic:
  stage: scan
  image: "${PULSE_IMAGE}"
  variables:
    IMAGE_NAME: "${CI_REGISTRY_IMAGE}"
    VERSION: "${STAGING_VERSION}"
  rules:
    - if: $CI_COMMIT_MESSAGE =~ /\[skip[ _-]scans?\]/i
      when: never
    - if: $SKIP_SCANS && $SKIP_SCANS == "yes"
      when: never
  before_script:
    - !reference [.regctl-setup, before_script]
    # We ensure that the DRIVER_VERSION and PLATFORM are set
    - 'if [[ "${PRECOMPILED}" != "true" ]]; then echo DRIVER_VERSION: ${DRIVER_VERSION} ; [[ -n "${DRIVER_VERSION}" ]] || exit 1; fi'
    - 'echo PLATFORM: ${PLATFORM} ; [[ -n "${PLATFORM}" ]] || exit 1'
    - apk add --no-cache make bash
    - docker login -u "${CI_REGISTRY_USER}" -p "${CI_REGISTRY_PASSWORD}" "${CI_REGISTRY}"
    - if [[ "${PRECOMPILED}" == "true" ]]; then ./scripts/precompiled.sh pull; else make pull-${DIST}-${DRIVER_VERSION}; fi
    - if [[ "${PRECOMPILED}" == "true" ]]; then ./scripts/precompiled.sh archive; else make archive-${DIST}-${DRIVER_VERSION}; fi
    - AuthHeader=$(echo -n $SSA_CLIENT_ID:$SSA_CLIENT_SECRET | base64 -w0)
    - >
      export SSA_TOKEN=$(curl --request POST --header "Authorization: Basic $AuthHeader" --header "Content-Type: application/x-www-form-urlencoded" ${SSA_ISSUER_URL} | jq ".access_token" |  tr -d '"')
    - if [ -z "$SSA_TOKEN" ]; then exit 1; else echo "SSA_TOKEN set!"; fi
  script:
    - pulse-cli -n $NSPECT_ID --ssa $SSA_TOKEN scan -i "archive.tar" -p $CONTAINER_POLICY -o
  artifacts:
    when: always
    expire_in: 1 week
    paths:
      - pulse-cli.log
      - licenses.json
      - sbom.json
      - vulns.json
      - policy_evaluation.json

.scan-rules-common:
  rules:
    - if: $CI_COMMIT_MESSAGE =~ /\[skip[ _-]scans?\]/i
      when: never
    - if: $SKIP_SCANS && $SKIP_SCANS == "yes"
      when: never

.scan:
  # Repeat for each DRIVER_VERSION
  extends:
    - .driver-versions
    - .scan-generic
  rules:
    - !reference [.scan-rules-common, rules]
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - !reference [.pipeline-trigger-rules, rules]

.scan-ubuntu22.04:
  # Repeat for each DRIVER_VERSION
  extends:
    - .driver-versions-ubuntu22.04
    - .scan-generic
  rules:
    - !reference [.scan-rules-common, rules]
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - !reference [.pipeline-trigger-rules, rules]

.scan-precompiled-ubuntu22.04:
  variables:
    DIST: signed_ubuntu22.04
    BASE_TARGET: jammy
    PRECOMPILED: "true"
  extends:
    - .driver-versions-precompiled-ubuntu22.04
    - .scan-generic
  rules:
    - !reference [.scan-rules-common, rules]
    - when: always

# Define the scan targets
scan-ubuntu20.04-amd64:
  extends:
    - .scan
    - .dist-ubuntu20.04
    - .platform-amd64
  needs:
    - image-ubuntu20.04

scan-ubuntu20.04-arm64:
  extends:
    - .scan
    - .dist-ubuntu20.04
    - .platform-arm64
  needs:
    - image-ubuntu20.04

scan-ubuntu22.04-amd64:
  extends:
    - .scan-ubuntu22.04
    - .dist-ubuntu22.04
    - .platform-amd64
  needs:
    - image-ubuntu22.04

scan-ubuntu22.04-arm64:
  extends:
    - .scan-ubuntu22.04
    - .dist-ubuntu22.04
    - .platform-arm64
  needs:
    - image-ubuntu22.04

scan-precompiled-ubuntu22.04-amd64:
  variables:
    PLATFORM: linux/amd64
  extends:
    - .scan-precompiled-ubuntu22.04
    - .platform-amd64
  needs:
    - image-precompiled-ubuntu22.04

scan-rhel8-amd64:
  extends:
    - .scan
    - .dist-rhel8
    - .platform-amd64
  needs:
    - image-rhel8

scan-rhel8-arm64:
  extends:
    - .scan
    - .dist-rhel8
    - .platform-arm64
  needs:
    - image-rhel8

scan-rhel9-amd64:
  extends:
    - .scan
    - .dist-rhel9
    - .platform-amd64
    - .driver-versions-rhel9
  needs:
    - image-rhel9

scan-rhel9-arm64:
  extends:
    - .scan
    - .dist-rhel9
    - .platform-arm64
    - .driver-versions-rhel9
  needs:
    - image-rhel9

.release:ngc-variables:
  variables:
    OUT_REGISTRY_USER: "${NGC_REGISTRY_USER}"
    OUT_REGISTRY_TOKEN: "${NGC_REGISTRY_TOKEN}"
    OUT_REGISTRY: "${NGC_REGISTRY}"
    OUT_IMAGE_NAME: "${NGC_REGISTRY_IMAGE}"

# Define the external release helpers
.release:ngc:
  extends:
    - .release:external
    - .release:ngc-variables

release:ngc-ubuntu20.04:
  extends:
    - .release:ngc
    - .dist-ubuntu20.04

release:ngc-ubuntu22.04:
  extends:
    - .release:ngc
    - .dist-ubuntu22.04
    - .driver-versions-ubuntu22.04

release:ngc-precompiled-ubuntu22.04:
  variables:
    DIST: signed_ubuntu22.04
    BASE_TARGET: jammy
    PRECOMPILED: "true"
  extends:
    - .driver-versions-precompiled-ubuntu22.04
    - .release-generic
    - .release:ngc-variables
  rules:
    # Only run NGC release job on scheduled pipelines
    - if: $CI_PIPELINE_SOURCE == "schedule"

release:ngc-rhcos4.9:
  extends:
    - .release:ngc
    - .dist-rhel8
  variables:
    OUT_DIST: "rhcos4.9"

release:ngc-rhcos4.10:
  extends:
    - .release:ngc
    - .dist-rhel8
  variables:
    OUT_DIST: "rhcos4.10"

release:ngc-rhcos4.11:
  extends:
    - .release:ngc
    - .dist-rhel8
  variables:
    OUT_DIST: "rhcos4.11"

release:ngc-rhcos4.12:
  extends:
    - .release:ngc
    - .dist-rhel8
  variables:
    OUT_DIST: "rhcos4.12"

release:ngc-rhcos4.13:
  extends:
    - .release:ngc
    - .dist-rhel8
  variables:
    OUT_DIST: "rhcos4.13"

release:ngc-rhcos4.14:
  extends:
    - .release:ngc
    - .dist-rhel8
  variables:
    OUT_DIST: "rhcos4.14"

release:ngc-rhcos4.15:
  extends:
    - .release:ngc
    - .dist-rhel8
  variables:
    OUT_DIST: "rhcos4.15"

release:ngc-rhel8.6:
  extends:
    - .release:ngc
    - .dist-rhel8
  variables:
    OUT_DIST: "rhel8.6"

release:ngc-rhel8.7:
  extends:
    - .release:ngc
    - .dist-rhel8
  variables:
    OUT_DIST: "rhel8.7"

release:ngc-rhel8.8:
  extends:
    - .release:ngc
    - .dist-rhel8
  variables:
    OUT_DIST: "rhel8.8"

release:ngc-rhel8.9:
  extends:
    - .release:ngc
    - .dist-rhel8
  variables:
    OUT_DIST: "rhel8.9"

release:ngc-rhel9.0:
  extends:
    - .release:ngc
    - .dist-rhel9
  variables:
    OUT_DIST: "rhel9.0"

release:ngc-rhel9.1:
  extends:
    - .release:ngc
    - .dist-rhel9
  variables:
    OUT_DIST: "rhel9.1"

release:ngc-rhel9.2:
  extends:
    - .release:ngc
    - .dist-rhel9
  variables:
    OUT_DIST: "rhel9.2"

release:ngc-rhel9.3:
  extends:
    - .release:ngc
    - .dist-rhel9
  variables:
    OUT_DIST: "rhel9.3"
